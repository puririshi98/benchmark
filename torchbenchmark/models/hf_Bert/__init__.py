
####################################
# Generated by gen_hf_generative.py#
####################################

import torch
import torch.optim as optim
import torchvision.models as models
from ...util.model import BenchmarkModel
from torchbenchmark.tasks import NLP
from transformers import *
from datasets import load_dataset
import torch.cuda.nvtx as nvtx
import time
class Model(BenchmarkModel):
    task = NLP.LANGUAGE_MODELING

    def __init__(self, device=None, jit=False, precision='float32', batchsize=1):
        super().__init__()
        self.device = device
        self.jit = jit

        torch.manual_seed(42)
        config = BertConfig()
        self.model = AutoModelForMaskedLM.from_config(config).to(device)
        self.optimizer = optim.Adam(self.model.parameters(), lr=0.001)

        input_ids = torch.randint(0, config.vocab_size, (4, 512)).to(device)
        decoder_ids = torch.randint(0, config.vocab_size, (4, 512)).to(device)

        eval_context = torch.randint(0, config.vocab_size, (1, 512)).to(device)

        self.train_inputs = {'input_ids': input_ids, 'labels': decoder_ids}
        self.eval_inputs = {'input_ids': eval_context, }

    def get_module(self):
        if self.jit:
            raise NotImplementedError()
        return self.model, self.eval_inputs

    def train(self, niter=3):
        if self.jit:
            raise NotImplementedError()
        self.model.train()
        for _ in range(niter):
            outputs = self.model(**self.train_inputs)
            loss = outputs.loss
            loss.backward()
            self.optimizer.step()
    def _step_eval(self, precision):
        nvtx.range_push('eval')
        output = self.model(self.eval_inputs['input_ids'])
        nvtx.range_pop()
    def eval(self, niter=1, precision='fp16', graphs=False, bench=False):
        niter = 8
        # with torch.autograd.profiler.emit_nvtx(record_shapes=True):
        self.model.eval()
        torch.backends.cudnn.benchmark = bench
        with torch.no_grad():
            if precision == 'fp16':
                self.model = self.model.half()
            elif precision == 'bfloat16':
                self.model=self.model.bfloat16()
            if graphs:
                s = torch.cuda.Stream()
                torch.cuda.synchronize()
                with torch.cuda.stream(s):
                    nvtx.range_push('warming up')
                    print('warming up')
                    for _ in range(5):
                        self._step_eval(precision)
                    nvtx.range_pop()
                    torch.cuda.empty_cache()
                    g = torch.cuda._Graph()
                    torch.cuda.synchronize()
                    nvtx.range_push('capturing graph')
                    print('capturing graph')
                    g.capture_begin()
                    self._step_eval(precision)
                    g.capture_end()
                    nvtx.range_pop()
                    torch.cuda.synchronize()
                nvtx.range_push('replaying')
                print('replaying')
                since=time.time()
                for _ in range(100):
                    g.replay()
                    torch.cuda.synchronize()
                print("Average Replay Time for VT:",round(1000.0 * (time.time()-since)/100.0,5),"ms")
                nvtx.range_pop()
            else:
                torch.cuda.synchronize()
                
                for i in range(5):
                    self._step_eval(precision)
                    torch.cuda.synchronize()
                since=time.time()
                for i in range(100):
                    self._step_eval(precision)
                    torch.cuda.synchronize()
                print("Average Replay Time for VT:",round(1000.0 * (time.time()-since)/100.0,5),"ms")


if __name__ == "__main__":
    import time
    m = Model(device="cuda")
    module, example_inputs = m.get_module()

    m.train(niter=1)
    torch.cuda.synchronize()

    begin = time.time()
    m.train(niter=1)
    torch.cuda.synchronize()
    print(time.time()-begin)

    begin = time.time()
    m.eval(niter=1)
    torch.cuda.synchronize()
    print(time.time()-begin)
    